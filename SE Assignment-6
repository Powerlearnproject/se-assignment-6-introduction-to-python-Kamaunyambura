Python Basics
What is Python, and what are some of its key features that make it popular among developers? Provide examples of use cases where Python is particularly effective.

Python is a high-level, interpreted programming language known for its simplicity and readability. Key features include:

Readable syntax: Python emphasizes readability with its clear and expressive syntax.
Versatility: Python can be used for web development, data analysis, artificial intelligence, scientific computing, and more.
Large standard library: Python comes with a comprehensive standard library that supports many common programming tasks.
Community and support: It has a large active community, making it easy to find libraries, tutorials, and support.
Use cases:

Web development: Django and Flask are popular Python frameworks.
Data science: Libraries like NumPy, Pandas, and TensorFlow are widely used.
Automation: Python scripts can automate repetitive tasks efficiently.
Installing Python
Describe the steps to install Python on your operating system (Windows, macOS, or Linux). Include how to verify the installation and set up a virtual environment.

Windows:

Download Python installer from python.org.
Run the installer, select "Add Python to PATH" during installation.
Open Command Prompt and verify with python --version.
macOS:

Python comes pre-installed on macOS, but it's recommended to install a newer version using Homebrew or from python.org.
Verify with python3 --version in Terminal.
Linux:

Use the package manager (e.g., apt, yum) to install Python.
Verify with python --version or python3 --version.
Setting up a virtual environment:

Install virtualenv using pip install virtualenv.
Create a virtual environment with virtualenv venv.
Activate the virtual environment:
Windows: venv\Scripts\activate
macOS/Linux: source venv/bin/activate
Python Syntax and Semantics
Write a simple Python program that prints "Hello, World!" to the console. Explain the basic syntax elements used in the program.

print("Hello, World!")
Explanation:

print(): Python function to output text to the console.
"Hello, World!": String literal enclosed in double quotes.
Data Types and Variables
List and describe the basic data types in Python. Write a short script that demonstrates how to create and use variables of different data types.

Basic data types:

int: Integer numbers (int).
float: Floating-point numbers (float).
str: String of characters (str).
bool: Boolean values (True or False).
list: Ordered collection of items (list).
dict: Collection of key-value pairs (dict).
Example script:
# Data types example
num1 = 10  # int
num2 = 3.5  # float
name = "Alice"  # str
is_valid = True  # bool
my_list = [1, 2, 3, 4]  # list
my_dict = {'a': 1, 'b': 2, 'c': 3}  # dict

print(num1)
print(num2)
print(name)
print(is_valid)
print(my_list)
print(my_dict)
Control Structures
Explain the use of conditional statements and loops in Python. Provide examples of an if-else statement and a for loop.

Conditional statement (if-else):
# If-else example
x = 10

if x > 5:
    print("x is greater than 5")
else:
    print("x is 5 or less")
Loop (for loop):
# For loop example
for i in range(5):
    print(i)
Functions in Python
What are functions in Python, and why are they useful? Write a Python function that takes two arguments and returns their sum. Include an example of how to call this function.

Functions are blocks of reusable code designed to perform a specific task.
# Function example
def add_numbers(a, b):
    return a + b

# Calling the function
result = add_numbers(3, 5)
print("Sum:", result)  # Output: Sum: 8
Lists and Dictionaries
Describe the differences between lists and dictionaries in Python. Write a script that creates a list of numbers and a dictionary with some key-value pairs, then demonstrates basic operations on both.

Lists (list):

Ordered collection of items.
Accessed by index.
Dictionaries (dict):

Unordered collection of key-value pairs.
Accessed by key.
Example script:
# Lists and dictionaries example
numbers = [1, 2, 3, 4, 5]  # list
person = {'name': 'Alice', 'age': 30, 'city': 'New York'}  # dict

# Accessing list elements
print(numbers[0])  # Output: 1

# Accessing dictionary elements
print(person['name'])  # Output: Alice

# Adding new items
numbers.append(6)
person['email'] = 'alice@example.com'

print(numbers)
print(person)
Exception Handling
What is exception handling in Python? Provide an example of how to use try, except, and finally blocks to handle errors in a Python script.

Exception handling allows you to gracefully manage errors that occur during program execution.
# Exception handling example
try:
    x = 10 / 0
except ZeroDivisionError:
    print("Error: division by zero")
finally:
    print("Execution completed")
Modules and Packages
Explain the concepts of modules and packages in Python. How can you import and use a module in your script? Provide an example using the math module.

Modules are Python files containing functions and variables that can be imported and used in other Python scripts. Packages are collections of modules.

Example with math module:
# Using modules example
import math

print(math.sqrt(16))  # Output: 4.0 (square root function)
print(math.pi)  # Output: 3.141592653589793 (constant)
File I/O
How do you read from and write to files in Python? Write a script that reads the content of a file and prints it to the console, and another script that writes a list of strings to a file.

Reading from a file:
# Reading from a file
with open('filename.txt', 'r') as file:
    content = file.read()
    print(content)

Writing to a file:
# Writing to a file
lines = ['First line\n', 'Second line\n', 'Third line\n']

with open('output.txt', 'w') as file:
    file.writelines(lines)
